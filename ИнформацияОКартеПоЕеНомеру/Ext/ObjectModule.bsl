// Сделать:
// + Удалить пробелы из номера карты
// - Загрузить все картинки ответа по URL

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем Версия Экспорт; // Версия программы, отображается в заголовке главной формы


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает структуру полей, согласно документации
// Документация: https://cardinfo.online/doc
//
// Параметры:
//  ПараметрыЗапроса  - Структура - поля запроса, согласно документации:
//						apiKey (обязательно) — ваш ключ API, который вы найдёте в личном кабинете.
//						input (обязательно) — первые 1–6 цифр в номере банковской карты.
//						brandLogoWidth, brandLogoHeight, bankLogoWidth, bankLogoHeight — размеры логотипов в пикселях. 
//						От них будет зависеть, какая ссылка будет указана в PNG версии логотипов. Если оставить пустыми, то ссылка будет дана без указания размеров.
//						fields — перечень полей через запятую, которые необходимо вернуть. Если оставить пустым, будут возвращены все поля.
//
//  ПрочитатьВСоответствие  - Булево - Флаг того, что ответ должен быть получен в виде Соответствия
//
// Возвращаемое значение:
//   Структура/Соответствие, Неопределено   - Поля, что вернул сервис api.cardinfo.online
//							Если произойдет ошибка, будет возвращено Неопределено
//
Функция ИнформацияОКарте(Знач ПараметрыЗапроса, Знач ПрочитатьВСоответствие = Ложь) Экспорт
	
	// Подправим параметры запроса: удалим пробелы из номера карты и обрежем длину до 6 символов
	Если ПараметрыЗапроса.Свойство("input") Тогда
		ПараметрыЗапроса.input = Лев(СтрЗаменить(ПараметрыЗапроса.input, " ", ""), 6);
	КонецЕсли;
	
	АдресСервиса = "api.cardinfo.online";
	ШаблонМетода = "";
	
	СтрокаОтвет = "";
	СтруктураОтвета = ВыполнитьHTTPЗапрос(АдресСервиса, ШаблонМетода, "GET", ПараметрыЗапроса,,, СтрокаОтвет);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ВыполнитьHTTPЗапрос(Знач АдресСервиса, Знач ШаблонМетода, Знач Направление = "Get", Знач Параметры, Знач ДопПараметрыСтрокой = "", Знач ПрочитатьВСоответствие = Ложь, СтрокаОтвет = "") Экспорт
	
	// Собираем текст запроса
	СтрПараметры = "";
	
	Для Каждого КлючИЗначение Из Параметры Цикл
		ИмяПараметра	  = КлючИЗначение.Ключ;
		ЗначениеПараметра = Формат(КлючИЗначение.Значение, "ЧРД=.; ЧГ=");
		
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			СтрПараметры = СтрПараметры + ?(СтрПараметры = "", "", "&") + ИмяПараметра + "=" + ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
	
	СтрПараметры = СтрПараметры + ?(ДопПараметрыСтрокой="", "", "&" + ДопПараметрыСтрокой);
	
	//ТекстЗапроса = encodeURIComponent(ТекстЗапроса);
	Таймаут = 15;
	
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса,,,,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Попытка
		Если ВРЕГ(Направление) = "GET" Тогда
			СтрПараметры = ?(СтрПараметры="", "", "?" + СтрПараметры);
			ТекстЗапроса = ?(ШаблонМетода= "", "", "/") + ШаблонМетода + СтрПараметры;
			HTTPЗапрос.АдресРесурса = ТекстЗапроса;
			
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		ИначеЕсли ВРЕГ(Направление) = "POST" Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрПараметры, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			HTTPЗапрос.АдресРесурса = ШаблонМетода;
			
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			Сообщить("Не знаю как обрабатывать направление " + Направление);
 			Возврат Неопределено
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при выполнении запроса " + АдресСервиса + "/" + ТекстЗапроса + ". " + ОписаниеОшибки());
		Возврат Неопределено
	КонецПопытки;
	
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку();
	Если КодСостояния <> 200 Тогда
		//СтрокаОтвет = ПереобразоватьЮникод(СтрокаОтвет);
		ТекстОшибки = "URI ресурса: " + АдресСервиса + HTTPЗапрос.АдресРесурса + Символы.ПС + "Тело: " + HTTPЗапрос.ПолучитьТелоКакСтроку() + Символы.ПС +
		"Ответ: " + СтрокаОтвет;
		
		Сообщить("Ошибка: " + ТекстОшибки, СтатусСообщения.Важное);
		
		Возврат Неопределено
	КонецЕсли;
	
	СтруктураОтвета = UnJSON(СтрокаОтвет, "Выполнение метода " + АдресСервиса + "/" + ТекстЗапроса, ПрочитатьВСоответствие);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция UnJSON(СтрокаJSON, ТекстОписанияОшибки="", ПрочитатьВСоответствие = Истина) Экспорт
	Попытка
		ЧтениеJSON=Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Значение=ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
		ЧтениеJSON.Закрыть();
		Возврат Значение
	Исключение
		Сообщить(ТекстОписанияОшибки + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		
		Если ЗначениеЗаполнено(ТекстОписанияОшибки) Тогда
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ТекстОписанияОшибки);
			Текст.Показать("Покажите этот отчет разработчику программы " + Метаданные().Синоним);
		КонецЕсли;
	КонецПопытки;
КонецФункции

Функция JSON(Структура) Экспорт
    ЗаписьJSON=Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON,Структура,Новый НастройкиСериализацииJSON,"ПреобразованиеJSON");
    Возврат ЗаписьJSON.Закрыть()
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПереобразоватьЮникод(Строка)

    
    ГотововаяСтрока = "" ;
    
    МасУкр = Новый Массив(66) ;
    
    МасУкр[0]="А";   МасУкр[1]="Б";  МасУкр[2]="В";  МасУкр[3]="Г";  МасУкр[4]="Ґ";  МасУкр[5]="Д";
    МасУкр[6]="Е";   МасУкр[7]="Є";  МасУкр[8]="Ж";  МасУкр[9]="З";  МасУкр[10]="И"; МасУкр[11]="І";
    МасУкр[12]="Ї";  МасУкр[13]="Й"; МасУкр[14]="К"; МасУкр[15]="Л"; МасУкр[16]="М"; МасУкр[17]="Н";
    МасУкр[18]="О";  МасУкр[19]="П"; МасУкр[20]="Р"; МасУкр[21]="С"; МасУкр[22]="Т"; МасУкр[23]="У";
    МасУкр[24]="Ф";  МасУкр[25]="Х"; МасУкр[26]="Ц"; МасУкр[27]="Ч"; МасУкр[28]="Ш"; МасУкр[29]="Щ";
    МасУкр[30]="Ь";  МасУкр[31]="Ю"; МасУкр[32]="Я";  

    МасУкр[33]="а";  МасУкр[34]="б"; МасУкр[35]="в"; МасУкр[36]="г"; МасУкр[37]="ґ"; МасУкр[38]="д";
    МасУкр[39]="е";  МасУкр[40]="є"; МасУкр[41]="ж"; МасУкр[42]="з"; МасУкр[43]="и"; МасУкр[44]="і";
    МасУкр[45]="ї";  МасУкр[46]="й"; МасУкр[47]="к"; МасУкр[48]="л"; МасУкр[49]="м"; МасУкр[50]="н";
    МасУкр[51]="о";  МасУкр[52]="п"; МасУкр[53]="р"; МасУкр[54]="с"; МасУкр[55]="т"; МасУкр[56]="у";
    МасУкр[57]="ф";  МасУкр[58]="х"; МасУкр[59]="ц"; МасУкр[60]="ч"; МасУкр[61]="ш"; МасУкр[62]="щ";
    МасУкр[63]="ь";  МасУкр[31]="ю"; МасУкр[65]="я";  
        
    
    МасКод = Новый Массив(66) ;
    
    МасКод[0]="0410";   МасКод[1]="0411";  МасКод[2]="0412";  МасКод[3]="0413";  МасКод[4]="0490";  МасКод[5]="0414";
    МасКод[6]="0415";   МасКод[7]="0404";  МасКод[8]="0416";  МасКод[9]="0417";  МасКод[10]="0418"; МасКод[11]="0406";
    МасКод[12]="0407";  МасКод[13]="0419"; МасКод[14]="041A"; МасКод[15]="041B"; МасКод[16]="041C"; МасКод[17]="041D";
    МасКод[18]="041E";  МасКод[19]="041F"; МасКод[20]="0420"; МасКод[21]="0421"; МасКод[22]="0422"; МасКод[23]="0423";
    МасКод[24]="0424";  МасКод[25]="0425"; МасКод[26]="0426"; МасКод[27]="0427"; МасКод[28]="0428"; МасКод[29]="0429";
    МасКод[30]="042C";  МасКод[31]="042E"; МасКод[32]="042F";  

    МасКод[33]="0430";  МасКод[34]="0431"; МасКод[35]="0432"; МасКод[36]="0413"; МасКод[37]="0491"; МасКод[38]="0434";
    МасКод[39]="0435";  МасКод[40]="0454"; МасКод[41]="0436"; МасКод[42]="0437"; МасКод[43]="0438"; МасКод[44]="0456";
    МасКод[45]="0457";  МасКод[46]="0439"; МасКод[47]="043A"; МасКод[48]="043B"; МасКод[49]="043C"; МасКод[50]="043D";
    МасКод[51]="043E";  МасКод[52]="043F"; МасКод[53]="0440"; МасКод[54]="0441"; МасКод[55]="0442"; МасКод[56]="0443";
    МасКод[57]="0444";  МасКод[58]="0445"; МасКод[59]="0446"; МасКод[60]="0447"; МасКод[61]="0448"; МасКод[62]="0449";
    МасКод[63]="044C";  МасКод[31]="044E"; МасКод[65]="044F";  
    
    
    тмпСтрока = "" ;
    Для Счетчик = 1 По СтрДлина(Строка) Цикл      
        Если Лев(Строка, 1) = "\" Тогда
            Если Лев(Строка, 2) = "\u" Тогда
                
                тмпСтрока = Прав(Лев(Строка, 6),4) ;
                Если МасКод.Найти(тмпСтрока) = Неопределено Тогда
                    СтрокаЗамены = Прав(тмпСтрока, 1) ;
                    тмпСтрока = СтрЗаменить(тмпСтрока,СтрокаЗамены,ТРег(СтрокаЗамены)); 
                    Если МасКод.Найти(тмпСтрока) = Неопределено Тогда
                        Сообщить("Код символа не найден: " + тмпСтрока) ;
                    Иначе                      
                        ГотововаяСтрока = ГотововаяСтрока + МасУкр[МасКод.Найти(тмпСтрока)] ;                                   
                    КонецЕсли;
                Иначе
                    ГотововаяСтрока = ГотововаяСтрока + МасУкр[МасКод.Найти(тмпСтрока)] ;               
                КонецЕсли;
                
                Строка = Прав(Строка, (СтрДлина(Строка)-6)) ; 
            Иначе  
                Строка = Прав(Строка, (СтрДлина(Строка)-2)) ;
            КонецЕсли;
        Иначе
            ГотововаяСтрока = ГотововаяСтрока + Лев(Строка, 1) ;
            Строка = Прав(Строка, (СтрДлина(Строка)-1)) ;     
        КонецЕсли;         
    КонецЦикла;   

    Возврат ГотововаяСтрока ;
        
КонецФункции

Функция encodeURIComponent(Знач URL)
	// Заменим "+" на "%2B", типа encodeURIComponent()
	URL = СтрЗаменить(URL, "+", "%2B");
	URL = КодироватьСтроку(URL, СпособКодированияСтроки.URLВКодировкеURL);
	
	Возврат URL
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Версия = "2020.04.11-1";



